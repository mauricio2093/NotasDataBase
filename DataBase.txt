----------------------- Bases de datos relacionales (RBD) -------------------------

Es importante que sea fácil de guardar y extraer, anteriormente se usaban bases de datos basadas en archivos, el cuál era texto plano fácil de guardar, pero difícil de extraer, por esto se inventaron las bases de datos relacionales. En 1990 Codd se preocupó porque los sistemas de gestión de bases de datos (SGBD) que decían ser relacionales, no lo eran. En la práctica es difícil cumplir las 12 pero, un SGBD es más relacional cuantas más reglas cumpla

Las Reglas y mandamientos de Edgar Frank Ted Codd

Regla 0: Regla de fundación.
a) Cualquier sistema que se proclame como relacional, debe ser capaz de gestionar sus bases de datos enteramente mediante sus capacidades relacionales.

Regla 1: Regla de la información.
a) Todos los datos deben estar almacenados en las tablas
b) Esas tablas deben cumplir las premisas del modelo relacional
c) No puede haber información a la que accedemos por otra vía

Regla 2: Regla del acceso garantizado.
a) Cualquier dato es accesible sabiendo la clave de su fila y el nombre de su columna o atributo
b) Si a un dato no podemos acceder de esta forma, no estamos usando un modelo relacional

Regla 3: Regla del tratamiento sistemático de valores nulos.
a) Esos valores pueden dar significado a la columna que los contiene
b) El SGBD debe tener la capacidad de manejar valores nulos
c) El SGBD reconocerá este valor diferenciándolo de cualquier otro
d) El SGBD deberá aplicársele la lógica apropiada
e) Es un valor independiente del tipo de datos de la columna

Regla 4: Catálogo dinámico en línea basado en el modelo relacional.
a) El catálogo en línea es el diccionario de datos
b) El diccionario de datos se debe de poder consultar usando las mismas técnicas que para los datos
c) Los metadatos, por tanto, se organizan también en tablas relacionales
d) Si SELECT es una instrucción que consulta datos, también será la que consulta los metadatos

Regla 5: Regla comprensiva del sublenguaje de los datos completo.
a) Al menos tiene que existir un lenguaje capaz de hacer todas las funciones del SGBD
b) No puede haber funciones fuera de ese lenguaje
c) Puede haber otros lenguajes en el SGBD para hacer ciertas tareas
d) Pero esas tareas también se deben poder hacer con el “lenguaje completo”

Regla 6: Regla de actualización de vistas.
a) Las vistas tienen que mostrar información actualizada
b) No puede haber diferencias entre los datos de las vistas y los datos de las tablas base

Regla 7: Alto nivel de inserción, actualización, y cancelación.
a) La idea es que el lenguaje que maneja la base de datos sea muy humano
b) Eso implica que las operaciones del lenguaje de manipulación de los datos (DML) trabajen con conjuntos de filas a la vez
c) Para modificar, eliminar o añadir datos, no hará falta programar de la forma en la que lo hacen los lenguajes de tercera generación como C o Java

Regla 8: Independencia física de los datos.
a) Cambios en la física de la BD no afecta a las aplicaciones ni a los esquemas lógicos
b) El acceso a las tablas (elemento lógico) no cambia porque la física de la base de datos cambie

Regla 9: Independencias lógicas de los datos.
a) Cambios en el esquema lógico (tablas) de la BD no afectan al resto de esquemas
b) Si cambiamos nombres de tabla, o de columna o modificamos información de las filas, las aplicaciones (esquema externo) no se ven afectadas
c) Es más difícil de conseguir

Regla 10: Independencia de la integridad.
a) Las reglas de integridad (restricciones) deben de ser gestionadas y almacenadas por el SGBD

Regla 11: Independencia de la distribución.
a) Que la base de datos se almacene o gestione de forma distribuida en varios servidores, no afecta al uso de esta ni a la programación de las aplicaciones de usuario
b) El esquema lógico es el mismo independientemente de si la BD es distribuida o no

Regla 12: La regla de la no subversión.
a) La base de datos no permitirá que exista un lenguaje o forma de acceso, que permita saltarse las reglas anteriores

----------------------------- Entidades y Atributos --------------------------------------------
Una entidad es algo similar a un objeto (programación orientada a objetos) y representa algo en el mundo real, incluso algo abstracto. Tienen atributos que son las cosas que los hacen ser una entidad y por convención se ponen en plural.

Los atributos compuestos son aquellos que tienen atributos ellos mismos.

Los atributos llave son aquellos que identifican a la entidad y no pueden ser repetidos. Existen:

Naturales: son inherentes al objeto como el número de serie
Clave artificial: no es inherente al objeto y se asigna de manera arbitraria.
Entidades fuertes: son entidades que pueden sobrevivir por sí solas.

Entidades débiles: no pueden existir sin una entidad fuerte y se representan con un cuadrado con doble línea.

Identidades débiles por identidad: no se diferencian entre sí más que por la clave de su identidad fuerte.
Identidades débiles por existencia: se les asigna una clave propia

------------------------ Relaciones

Las relaciones, representadas por un rombo, sirven para crear relaciones entre entidades. 
Por convención las relaciones son verbos que conectan entidades. Existen entidades multivaluadas o compuestas que tienen vida propia y 
se relacionan con otras entidades, por lo que se pueden normalizar (concepto que se explicará luego)

----------------------- Cardinalidad

Es una propiedad de las relaciones que indica la cantidad y correspondencia con la que puede estar relacionada una entidad y puede ser uno a uno,
uno a varios, varios a uno y varios a varios.

Cardinalidad: 1 a 1
Cardinalidad: 0 a 1
Cardinalidad: 1 a N
Cardinalidad: 0 a N

------------------------ Cardinalidades múltiples muchos
También conocida como “Muchos a Muchos”. Es el tipo de cardinalidad en el que muchas entidades
de un tipo, pertenecen a muchas entidades de otro, la cual debe ser normalizada y relacionada 
a partir de llaves foráneas.
Cardinalidad: N  a N

------------------------ Ahorro de memoria a la hora de poner el diagrama de la base de datos en el mundo real (En el motor de base de datos ya sea SQLSERVER o Oracle). 
El Char sirve para declarar un campo rigido de disco que vamos a ocupar y el varchar puede cambiar la longitud dependiento del largo de los datos que metamos en el. 
Seguramente esten pensando que lo mejor es un varchar para todo ya que es dinamico. Pero que el motor de base de datos haga los procesos de calcular la nueva longitud 
de cada dato del tipo varchar que ingresemos nos puede dar problemas de rendimiento. 
Si estamos seguros que un dato solo ocupara un char de 5 ocupemos un char de 5. Estas son algunas de las buenas practicas que se debe tener para el funcionamiento de un motor de base de datos.

Para llevar a la práctica un diagrama debemos ir más allá y darle detalle con parámetros como:

Tipos de dato:

Texto: CHAR(n), VARCHAR(n), TEXT
Números: INTEGER, BIGINT, SMALLINT, DECIMAL(n,s), NUMERIC(n,s)
Fecha/hora: DATE, TIME, DATETIME, TIMESTAMP
Lógicos: BOOLEAN
Constraints (Restricciones)

NOT NULL: Se asegura que la columna no tenga valores nulos
UNIQUE: Se asegura que cada valor en la columna no se repita
PRIMARY KEY: Es una combinación de NOT NULL y UNIQUE
FOREIGN KEY: Identifica de manera única una tupla en otra tabla
CHECK: Se asegura que el valor en la columna cumpla una condición dada
DEFAULT: Coloca un valor por defecto cuando no hay un valor especificado
INDEX: Se crea por columna para permitir búsquedas más rápidas

-------------------------- Normalización
La normalización como su nombre lo indica nos ayuda a dejar todo de una forma normal. 
Esto obedece a las 12 reglas de Codd y nos permiten separar componentes en la base de datos:

1FN Primera forma normal: Atributos atómicos (Sin campos repetidos). 
Esto quiere decir que ningún campo puede tener el mismo tipo de valor como varios 
campos materia (materia1, materia2,…).

2FN Segunda forma normal: Cumplir con 1FN y Cada campo de la tabla debe depender de una 
clave única. Es decir en las tablas no se puede repetir los campos primarios ya que los 
mismos son únicos por tanto si existe una relación uno a muchos se debe crear una tabla 
aparte donde cohabitaran la llave primaria de la primera tabla y la llave primaria de la 
segunda tabla de esta forma logramos relacionar de manera efectiva dos tablas respetando 
las llaves primarias.

3FN Tercera forma normal: Cumple 1FN y 2FN y los campos que NO son clave NO deben tener 
dependencias. Esto nos indica que todos los campos de la tabla deben estar estrechamente 
relacionados con el campo primario y no serlo de manera transitiva, por ejemplo, 
en una tabla torneos tenemos el código del torneo el nombre el ganador y la fecha de 
nacimiento del ganador, como observamos no podemos tener la fecha de nacimiento del ganador 
en dicha tabla ya que no está relacionada para nada con el torneo y además existe la 
posibilidad que en varios registros el mismo ganador tenga diferentes fechas de nacimiento 
por lo cual no mantendría la consistencia de los datos.

4FN Cuarta forma normal: Cumplir 1FN 2FN y 3FN. Los campos multivaluados se identifican por 
una clave única. Cuando relacionamos dos tablas totalmente independientes cada una de la otra 
debemos relacionarlas a través de una tabla aparte de las mismas donde solo colocaremos las 
llaves primarias de cada tabla ya que colocar cualquier otra información relacionada con las 
tablas implicaría repetir datos, además de hacer la tarea de actualización de registros 
primarias más compleja, ya que por ejemplo si deseo actualizar el nombre del curso no solo 
lo tendría que hacer en la tabla cursos sino también en cada tabla donde coloque el nombre 
lo cual no garantiza la integridad de la información, adiciona información innecesaria en 
los registros y hace más complejo el trabajo de administrar los datos.

1.- Determinar el problema a solucionar, la finalidad y los requerimientos.
Antes de comenzar un proyecto de Base de datos, es importante, determinar el eje a seguir para el diseño, 
ya que estas nos marcarán las pautas para tener un buen resultado.

2.- Modelado de Entidades
La idea es que se identifiquen los objetos de la base de datos, llamadas entidades.
Para el modelado de la base de datos se propone utilizar el “modelado de objetos”, ya que, 
la técnica propone una forma abstracta de pensamiento acerca de problemas a resolver, 
empleando conceptos del mundo real, y no conceptos técnicos informáticos.
En el proyecto se pueden identificar varios objetos que se relacionan y establecen un 
flujo de información, estos objetos se llegaran a transformar en tablas bidimensionales, 
las cuales son el fundamento de este tipo de base de datos relacional.

A.- Definir entidades.
Recordemos que las Entidades, son objetos o cosas que existen en nuestro alrededor, pensando en el
proyecto ¿qué objetos intervienen en el proceso del proyecto?
Estos objetos surgen identificando todos los actores que tienen el proceso, posteriormente 
identifique las relaciones que tiene cada uno, sus responsabilidades, y el papel que tiene en 
el proceso.

B.- Definir los atributos
Recordemos que los objetos tienen apartados que son: identificador, atributos y métodos. Productos
Toda entidad tiene atributos que la describen, siendo el atributo las características de la Entidad.
.
3.- Modelado Relacional. Prototipo de BD sin normalizar.
Ahora bien, para el modelado ER, vamos a retomar las entidades, con sus respectivos atributos. 
En este paso hacemos énfasis en las relaciones de las entidades, mediante la cardinalidad, 
entendida por la cantidad de relaciones que tienen los objetos.
Para comprender la necesidad del proyecto se debe leer detenidamente y ver cómo interactúan 
los objetos y relaciones de conjuntos, delimitando la asociación.
Además, en el modelo ER, se utilizan figuras de relación y se hace uso de las claves principales y 
las claves foráneas.

A) Diagrama E/R
Diagrama de entidad- interrelación (E/R) perite representar gráficamente la estructura lógica de una 
base de datos. Para poder guiarnos y entender de mejor forma la base de datos a realizar.
Figuras:
• Rectángulos: entidades
• Elipsis: Atributos
• Rombos: Interrelaciones
• Líneas: enlazan los atributos a entidades, atributos a interrelaciones y entidades a interrelaciones.

B) Cardinalidades
La razón de cardinalidad, expresa el numero de entidades a las que otra entidad puede estar asociada 
por medio de una interrelación. Existen los siguientes tipos:

• Uno a uno (1:1).
• Uno a varios (1:N).
• Varios a uno (N:1) o la simétrica de la anterior.
• Varios a varios o muchos a muchos (N:M).

**4.- Base de datos Normalizada **
Continuamos con el paso de normalizar, ¿pero ¿qué es normalizar?
Para mejorar el desempeño de una base de datos, así como evitar redundancia en la información que 
contiene y en consecuencia, generar condiciones para un mejor diseño, se debe conocer las formas de 
normalización.
La normalización de datos es el proceso que permite refinar la construcción de modelos relacional con 
el objetivo de minimizar la redundancia de datos mediante ciertas normas y restricciones con el fin de
 evitar futuros problemas cuando nuestra base de datos sea mayor.
Su principal objetivo es reducir la redundancia de datos y simplificar las dependencias entre columnas,
aplicándose de manera acumulativa.

Aplicación de Normalización
a) Convertirlas en Tablas
El modelado relacional, se deberá convertir en tablas, la siguiente imagen muestra las partes que la integran.

tablas.PNG
b) Realizar algunos registros
Para ayudarse a visualizar mejor los casos en los que estamos cayendo en redundancias, sirve hacer ejemplos de los registros, 
de esta manera nos podemos percatar en las situaciones donde tendremos problemas con la estructura de nuestra base de datos.

c) Aplicaremos las reglas de Normalización
----1FN: El valor de una columna debe ser una entidad atómica, indivisible, excluyendo así las dificultades que podría conllevar 
el tratamiento de un dato formado de varias partes.

----2FN: Una tabla se encuentra en 2FN cuando está en 1FN y no contiene dependencias parciales. Por consiguiente, una tabla 1FN 
automáticamente está en 2FN si su clave primaria está basada solamente en un atributo simple. Una tabla en 2FN aún puede contener dependencias transitivas.

----3FN: Cumple con la 1FN y 2FN y los campos que NO son clave, NO deben tener dependencias. Se debe seguir analizando la estructura de las tablas, 
para evitar que no haya registros con campos no dependientes.

----4FN: Cumple 1FN, 2FN, 3FN y los campos multivaluados se identifican por una clave única.

----------------------------- 

RDB (relational database)

RDBMS (Relational DataBase Magement System) Sistema Manejador de Bases de datos relacionales.

La diferencia entre ambos es que las BBDD son un conjunto de datos pertenecientes ( o al menos en teoría) a un mismo tipo de contexto, que guarda los datos de forma persistente para un posterior uso, y el Sistema de gestión de BBDD o sistema manejador, es el que nos permite acceder a ella, es un software, herramienta que sirve de conexión entre las BBDD y el usuario (nos presenta una interfaz para poder gestionarla, manejarla).

RDBMS

MySQL
PostgreSQL
Etc
Todas toman un lenguaje base, pero cada uno lo apropia, imponiéndole diferentes reglas y características.

---------------------------------
DML
o Data Manipulation Language o Lenguaje de Manipulación de Datos
o Lenguaje procedimental y declarativo  conjunto de instrucciones que apoyarán al proceso de construcción de la BD
o Las sentencias DML afectan los registros en una tabla. Estas son operaciones básicas que realizamos sobre datos tales como seleccionar algunos registros de una tabla, insertar nuevos registros, eliminar registros innecesarios y actualizar / modificar registros existentes.
o Opciones DML
 SELECT: para seleccionar registros de tablas
 INSERT: para insertar nuevos registros
 UPDATE: para actualizar y modificar registros
 DELETE: para eliminar registros existentes.

DDL
o Data Definition Language o Lenguaje de Definición de Datos
o Aquí ya se especifica el esquema de la BD, generando un diccionario de datos, las restricciones de integridad y las autorizaciones para que ciertos usuarios no vean cierto contenido.
o Sentencias DDL son las necesarias para poder modificar la BD, esquema y ESTRUCTURA de las tablas. Son las útiles para el diseño y control de objetos que se encuentran dentro de las BD.
o Opciones DDL
 CREATE: Crear una nueva base de datos, una tabla o esquema.
 ALTER: Alterar tabla existente, descripción de columnas, etc.
 DROP: Eliminar objetos existentes de la BD.
o 3 objetos que manipularemos con el lenguaje DDL
 Database
 Tables  traducción a SQL de las entidades
 View  se ofrece la proyección de los datos de la BD de forma entendible

DCL
o Lenguaje de Control de Datos
o Las declaraciones DLC son las encargadas de controlar el acceso de los usuarios a las BD.
o Opciones DDL
 GRANT:
• Declaración que permite a los usuarios leer / escribir en objetos que digamos de la BD.
 REVOKE:
• Es la que ofrece a los usuarios estar sin permiso de lectura / escritura en objetos de la BD.

TLC
o Lenguaje de Control de Transacciones
o Instrucciones que permiten administrar transacciones y tener integridad de datos dentro de las declaraciones SQL. Se gestiona a través de las siguientes declaraciones
 BEGIN Transaction
• Nos permite abrir una transacción
 COMMIT Transaction
• Ofrece confirmar una transacción
 ROLLBACK Transaction
• Devuelve una transacción en caso de error cometido.
Las tablas = Entidades…
Las columnas = Atributos…
Base de datos = Schema…

DDL -> Data Definition Language
Ayuda a crear la estructura de una BD.

Create
* Database
* Table
* View
Alter
Drop
DML -> Data Manipulation Language
Ayuda a la manipulacion del contenido

Insert
Update
Delete
Select
---------------------
On update: Significa qué pasará con las relaciones cuando una de estas sea modificada en sus campos relacionados, Por ejemplo, pueden utilizarse los valores:
cascade: Si el id de un usuario pasa de 11 a 12, entonces la relacion se actualizará y el post buscará el id nuevo en lugar de quedarse sin usuario.
_ restrict: _Si el id de un usuario pasa de 11 a 12, no lo permitirá hasta que no sean actualizados antes todos los post relacionados.
set null Si el id de un usuario pasa de 11 a 12, entonces los post solo no estará relacionados con nada.
no action: Si el id de un usuario pasa de 11 a 12, no se hará nada. Solo se romperá la relación.
On delete
_ cascade: Si un usuario es eliminado entonces se borrarán todos los post relacionados.
restrict: No se podrá eliminar un usuario hasta que sean eliminados todos su post relacionados.
_ set null: Si un usuario es eliminado, entonces los post solo no estará relacionados con nada.
no action: Si un usuario es eliminado, no se hará nada. Solo se romperá la relación.

-----------------------------
Las consultas en una base de datos juegan un papel muy fundamental, puesto que facilitan de manera considerable los procesos en cualquier empresa.
ETL
La palabra ETL correspondería al acrónimo de:
Extract (Extraer)
Transform (Transformar)
Load (Cargar)
ETL hace parte del proceso de integración de datos, mas aun es un componente muy importante que completa el resultado final en la relación 
de aplicaciones y sistemas.


--------------------------------
WHERE es la sentencia que nos ayuda a filtrar tuplas o registros dependiendo de las características que elegimos.

La propiedad LIKE nos ayuda a traer registros de los cuales conocemos sólo una parte de la información.
La propiedad BETWEEN nos sirve para arrojar registros que estén en el medio de dos. Por ejemplo los registros con id entre 20 y 30.

-------------------------------
La sentencia ORDER BY tiene que ver con el ordenamiento de los datos dependiendo de los criterios que quieras usar.

ASC sirve para ordenar de forma ascendente.
DESC sirve para ordenar de forma descendente.
LIMIT se usa para limitar la cantidad de resultados que arroja el query.
HAVING tiene una similitud muy grande con WHERE, sin embargo el uso de ellos depende del orden. Cuando se quiere seleccionar tuplas agrupadas únicamente se puede hacer con HAVING.

Las consultas anidadas son la mejor opción cuando los valores dependen de otras tablas, y estas no se encuentran relacionadas entre si.

Las consultas anidadas son la mejor opción para casos de INSERT, DELETE, UPDATE, cuya condición dependa del esenario explicado en el punto anterior

Los JOINS son la mejor opción para casos de SELECT

Los Nested queries significan que dentro de un query podemos hacer otro query. Esto sirve para hacer join de tablas, estando una en memoria. También teniendo un query como condicional del otro.

Este proceso puede ser tan profundo como quieras, teniendo infinitos queries anidados.
Se le conoce como un producto cartesiano ya que se multiplican todos los registros de una 
tabla con todos los del nuevo query. Esto provoca que el query sea difícil de procesar por lo 
pesado que puede resultar.

SELECT: Lo que quieres mostrar
Nickname
Titulo del post
FROM: De dónde voy a tomar los datos
Tabla usuarios y post
WHERE: Los filtros de los datos que quieres mostrar
Deben de ser de edgar@com
GROUP BY: Los rubros por los que me interesa agrupar la información
No deseo agrupar
ORDER BY: El orden en que quiero presentar mi información
por fecha de publicación
HAVING: Los filtros que quiero que mis datos agrupados tengan
SELECT u.nickname, p.titulo FROM usuarios u inner join posts p ON u.id=p.usuario_id where u.email="edgar@com" ORDER BY p.fecha_publicacion;

Respecto a las bases de datos no relacionales, no existe un solo tipo aunque se engloben en una sola categoría.

Tipos de bases de datos no relacionales:

Clave - valor: Son ideales para almacenar y extraer datos con una clave única. Manejan los diccionarios de manera excepcional. Ejemplos: DynamoDB, Cassandra.
Basadas en documentos: Son una implementación de clave valor que varía en la forma semiestructurada en que se trata la información. Ideal para almacenar datos JSON y XML. Ejemplos: MongoDB, Firestore.
Basadas en grafos: Basadas en teoría de grafos, sirven para entidades que se encuentran interconectadas por múltiples relaciones. Ideales para almacenar relaciones complejas. Ejemplos: neo4j, TITAN.
En memoria: Pueden ser de estructura variada, pero su ventaja radica en la velocidad, ya que al vivir en memoria la extracción de datos es casi inmediata. Ejemplos: Memcached, Redis.
Optimizadas para búsquedas: Pueden ser de diversas estructuras, su ventaja radica en que se pueden hacer queries y búsquedas complejas de manera sencilla. Ejemplos: BigQuery, Elasticsearch.
Clases relacionad

----------------------------------------------
Tipos de datos en Firestore:

String: Cualquier tipo de valor alfanumérico

Number: Soporta enteros y flotantes.

Boolenan: Los clásicos valores True y False

Map: Permite agregar un documento dentro de otro.

Array: Permite agregar un conjunto de datos (soporte multi type) sin nombre e identificador.

Null: Indica que no se ha definido un valor.

Timestamp: Permite almacenar fechas (guarda el año, mes, día y hora).

Geopoint: Guarda una localización geográfica (coordenadas latitud-longitud).

Reference: Permite referencia un documento (relaciona dos documentos, no importa su colección).


------------------------------------------------------------------------

Un top level collection se utilizaria para relaciones de tipo “agregacion”. 
Mientras que una sub collection se utilizaria para relaciones tipo “composicion”.

Por ejemplo:

Tenemos Estudiantes, Cursos y Notas. Los estudiantes tiene cursos y los cursos tiene estudiantes. 
Si se elimina un curso los estudiantes no deben ser eliminados. Lo mismo si se elimina un estudiante los cursos no deben ser elimiandos. Esto es una relacion de agregacion. Aqui se usaria top level collection para estudiantes y cursos.

Los estudiantes tienen notas y las notas pertenecen a un estudiante. Si se elimina un estudiante, 
tiene sentido eliminar las notas. Esto es una relacion de composicion. Aqui se usarian las subcollections. El estudiante tendría una subcollection de notas.


------------------------

Dentro de las bases de datos relacionales tenemos diferentes niveles de datos. 
En primer lugar tenemos las Bases de Datos o Esquemas como repositorios donde 
vivirán los datos que nos interesa guardar. Dentro del esquema existen las Tablas 
que provienen del concepto de entidades; y a su vez dentro de las tablas tenemos 
las tuplas o renglones.

Cuando trabajamos con bases de datos basadas en documentos como Firestore, 
aún existe la figura de la base de datos, sin embargo cambiaremos las tablas en favor 
de las colecciones y las tuplas en lugar de los documentos.

Recuerda:

Tabla -> Colección

Tupla -> Documento

Dentro de las Colecciones existen 2 grandes tipos. Las Top level collection o colecciones 
de nivel superior y las subcollections o subcolecciones. Estas últimas viven únicamente 
dentro de un documento padre.

¿Cómo saber cuál escoger?

Para determinar si tu colección debe ser top level o subcolección no hay una regla escrita 
en piedra y más bien tiene que ver con el caso de uso en particular y con la experiencia que 
hayas ganado como desarrollador.

Lo cierto es que no hay una sola forma de estructurar nuestra DB basada en documentos, 
y por tanto no existe una respuesta correcta, sin embargo a continuación te ofrezco un par de 
reglas guía que puedes utilizar para transformar tu proyecto que ya trabajaste en bases de datos 
relacionales en un proyecto no relacional.

Regla 1. Piensa en la vista de tu aplicación

La primera pista que te puedo dar es que pienses en un inicio en la manera en que los datos serán 
extraídos. En el caso de una aplicación, la mejor forma de pensarlo es en términos de las vistas 
que vas a mostrar a un momento determinado en la aplicación.

Es decir, al armar la estructura en la base de datos que sea un espejo o que al menos contenga todos 
los datos necesarios para llenar las necesidades que tiene nuestra parte visual en la aplicación.

En el caso de Platziblog por ejemplo si tienes una vista de un blog post individual, generalmente 
conviene mostrar además de los datos inherentes al post como el contenido, datos adicionales como 
las etiquetas que tiene o por ejemplo el autor (o autores si es colaborativo), en este caso tal vez 
convenga guardar estas dos “entidades” (autores y etiquetas) como subcolecciones de cada documento 
blog post.

Regla 2. La colección tiene vida propia

Esta regla se refiere a que la excepción a la regla 1 es cuando tenemos un caso en que la “entidad” 
que tiene necesidad de vivir y modificarse constantemente de manera independiente a las otras colecciones. 
Por ejemplo en Platziblog podemos en el ejemplo anterior hacer una excepción a autores porque nos 
conviene tenerlas como top level collection en el sentido que se añadan, borren, cambien o listen los 
usuarios sin depender del blog post.

Experimenta aplicando estas dos reglas a un proyecto que ya conozcas en una base de datos relacional 
y trata de convertirla en un proyecto de Firestore y comentanos los retos a los que te enfrentaste.

------------------------------------------- BASES DE DATOS EN LA VIDA REAL

Hoy en dia, se utilizan diversos tipos de bases de datos segun el problema que se quiera resolver:
Las bases de datos relacionales, durante mucho tiempo, fueron utilizadas para resolver todo tipo de situaciones, pero al aumentar enormemente el numero de datos a manejar, se volveron ineficientes en muchos casos.
Firestore o MongoDB nos permiten obtener los datos actuales de la aplicacion de manera simple. Sin embargo, no nos permite hacer, por ejemplo, queries muy complejos.
En una misma disciplina, es probable que haya que utilizar mas de un tipo de bases de datos.
